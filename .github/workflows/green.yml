name: green

on:
  pull_request:
  push:
    # tags:
    # - '*'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:

  # This job limits concurrency on the default branch
  # - we want it to run so it can populate ccache, but we typically
  #   don't care about when it completes, so limit its concurrency
  #   to stop eating up valuable + slow Windows/macOS runners
  setup_concurrency:
    runs-on: ubuntu-latest
    outputs:
      max-parallel: ${{ steps.max-parallel.outputs.p }}
    steps:
    - name: Setup concurrency
      shell: bash
      id: max-parallel
      run: |
        if [[ "${{ github.ref_name }}" == "${{ inputs.default_branch }}" ]]; then
          echo "PARALLEL=1"
          echo "p={\"v\": 1}" >> $GITHUB_OUTPUT
        else
          echo "PARALLEL=10000"
          echo "p={\"v\": 10000}" >> $GITHUB_OUTPUT
        fi

  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: psf/black@stable

  build:
    needs: [setup_concurrency]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.setup_concurrency.outputs.max-parallel).v }}
      matrix:
        os: [ubuntu-22.04, macos-11, windows-2022]
        # os: [ubuntu-22.04]
        python_version:
        - '3.8'
        - '3.9'
        - '3.10'
        - '3.11'

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}

    - name: Set ccache variant
      shell: bash
      id: ccache
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "VARIANT=sccache" >> $GITHUB_OUTPUT
          echo "INVOKE_CC_LAUNCHER=sccache" >> $GITHUB_ENV
        else
          echo "VARIANT=ccache" >> $GITHUB_OUTPUT
          echo "INVOKE_CC_LAUNCHER=ccache" >> $GITHUB_ENV
        fi

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.os }}-${{ matrix.python_version }}
        variant: ${{ steps.ccache.outputs.variant }}
        max-size: 2.2G

    - name: Install Robotpy Build
      shell: bash
      run: |
        python -m pip install --upgrade 'robotpy-build @ git+https://github.com/robotpy/robotpy-build@main' wheel setuptools
        python -m pip uninstall -y pydantic
        python -m pip install pydantic==1.*

    - name: Install invoke
      shell: bash
      run: |
        python -m pip install invoke shellingham

    - name: wpiutil.build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke wpiutil.build-wheel
    - name: hal.build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke hal.build-wheel
    - name: wpinet.build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke wpinet.build-wheel
    - name: halsim-ds-socket.build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke halsim-ds-socket.build-wheel
    - name: wpimath.build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke wpimath.build-wheel
    - name: ntcore.build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke ntcore.build-wheel
    - name: halsim-gui.build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke halsim-gui.build-wheel
    - name: halsim-ws.build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke halsim-ws.build-wheel
    - name: wpilib.build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke wpilib.build-wheel
    - name: romi.build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke romi.build-wheel
    - name: build-wheel  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke build-wheel
    - name: hal.test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke hal.test
    - name: halsim-ds-socket.test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke halsim-ds-socket.test
    - name: halsim-gui.test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke halsim-gui.test
    - name: halsim-ws.test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke halsim-ws.test
    - name: ntcore.test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke ntcore.test
    - name: romi.test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke romi.test
    - name: wpilib.test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke wpilib.test
    - name: wpimath.test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke wpimath.test
    - name: wpinet.test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke wpinet.test
    - name: wpiutil.test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke wpiutil.test
    - name: test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke test
    - name: build-and-test  # For tasks build-and-test, Autogenerated by invoke.
      shell: bash
      run: RPYINVOKE_NO_PRE=1 python -m invoke build-and-test
